package com.knowledge.common.base.util;

import javax.mail.MessagingException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;

import com.knowledge.common.base.email.service.IMailService;
import com.knowledge.common.business.member.entity.TbMember;
import com.knowledge.common.business.periodical.entity.TbSelectedPeriodical;

@Component
public class SendEmailAsync {
	private static Logger log = LoggerFactory.getLogger(SendEmailAsync.class);
	@Autowired
	private IMailService mailService;

	@Autowired
	private TemplateEngine templateEngine;

	/*
	 * @SuppressWarnings("unused") private static String changeEncode(String str) {
	 * try { str = new String(str.getBytes("ISO-8859-1"), "UTF-8"); // "B"代表Base64 }
	 * catch (UnsupportedEncodingException e) { log.error(e.getMessage()); } return
	 * str; }
	 */

	@Async("executor")
	public void sendEmail(TbMember member, Integer type) {
		String hostName = member.getHostName();
		String code = member.getActiveCode();
		String email = member.getEmail();
		String name = member.getNickname();
		Context context = new Context();
		switch (type) {
		case 1:
			// 注册发动邮件
			context.setVariable("project", "IJPay");
			context.setVariable("author", "jide");
			context.setVariable("url", "http://47.52.113.238:8090/#/login");
			String emailContent = templateEngine.process("emailTemp", context);
			try {
				mailService.sendHtmlMail(email, "電子郵箱驗證", emailContent);
			} catch (MessagingException e) {
				log.error("電子郵箱驗證发送失败： {}" + e.getMessage());
			}
			break;
		case 2:
			// 密码修改发送邮件
			context.setVariable("project", "IJPay");
			context.setVariable("author", "jide");
			context.setVariable("url", "http://47.52.113.238:8090/#/home");
			String emailupdate = templateEngine.process("emailTemp", context);
			try {
				mailService.sendHtmlMail(email, "電子郵箱驗證", emailupdate);
			} catch (MessagingException e) {
				log.error("密码修邮件发送失败： {} " + e.getMessage());
			}
			break;
		case 3:
			break;
		default:
			break;
		}
	}

	/**
	 * 訂閱電子雜誌的郵件發送
	 */
	@Async("executor")
	public void sendEleMagazine(TbSelectedPeriodical selectedperiodical) {

	}
}
