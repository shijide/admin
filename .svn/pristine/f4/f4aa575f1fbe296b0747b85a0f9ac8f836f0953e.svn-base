package com.knowledge.common.base.util;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.PropertySource;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import com.aliyun.oss.OSSClient;
import com.aliyun.oss.model.ObjectMetadata;
import com.aliyun.oss.model.PutObjectResult;
import com.feilong.core.Validator;
import com.knowledge.common.base.config.exception.BusinessException;
import com.knowledge.common.base.enums.EnumResult;


@Component
@PropertySource("classpath:oss.yml")
public class OSSUtil {
	
	private static Log logger = LogFactory.getLog(OSSUtil.class);
	
	private static final String dateTimeFormatter = "yyyyMMddHHmmssSSS";
	
	// 文件类型
	private static List<String> fileTypes = new ArrayList<String>();
	
	static {
		fileTypes.add("jpg");
		fileTypes.add("jpeg");
		fileTypes.add("bmp");
		fileTypes.add("gif");
		fileTypes.add("png");
		fileTypes.add("xls");
		fileTypes.add("xlsx");
		fileTypes.add("word");
		fileTypes.add("pdf");
		fileTypes.add("txt");
		fileTypes.add("svg");
	}
	
	@Value("${ossAccessBucketName}")
	private String ossAccessBucketName;

	@Value("${ossImageDomai}")
	private String ossImageDomai;
	
	@Value("${accessKeyId}")
	private String accessKeyId;
	
	@Value("${accessKeySecret}")
	private String accessKeySecret;
	
	@Value("${ossImgUrl}")
	private String ossImgUrl;
	
	/**
	 * 上传图片到云服务器
	 * 
	 */
	@SuppressWarnings("deprecation")
	public String saveImage(String folder, MultipartFile file)
			throws BusinessException {
		String ossDomaiUrl = null;
		InputStream content = null;
		ObjectMetadata meta = null;
		//String ext = imgType(file);
		String filename = file.getOriginalFilename();
		if(Validator.isNullOrEmpty(filename)) {
			throw new BusinessException(EnumResult.FILE_IS_NOTEMPTY);
		}
		logger.debug("OSS-------------------filename: "+filename);
		String[] str = filename.split("\\.");
		String name = str[0];
		String suffix = str[1];
		if (!fileTypes.contains(suffix)) {
			throw new BusinessException(EnumResult.FILE_UPLOAD_TYPE_ERROR);
		}
		OSSClient client = new OSSClient(ossImageDomai,accessKeyId,accessKeySecret);
		try {
			logger.info("BucketName:" + ossAccessBucketName.trim());
			content = file.getInputStream();
			// 创建上传Object的Metadata
			meta = new ObjectMetadata();
			// 必须设置getContentType
			meta.setContentType(file.getContentType());
			// 必须设置ContentLength
			long len = file.getSize();
			meta.setContentLength(len);
			StringBuffer sbUrl = new StringBuffer();
			sbUrl.append(folder);
			sbUrl.append(name+newDateTimeString()).append(".").append(suffix).toString();
			String key = sbUrl.toString();
			// 上传文件.
			PutObjectResult result = client.putObject(ossAccessBucketName, key, content, meta);
			ossDomaiUrl = getOssUrl(ossImgUrl, key);
			System.out.println("=================================================key="+key);
		} catch (Exception e) {
			logger.error("ossUrl:", e);
			e.getStackTrace();
			throw new BusinessException(EnumResult.FILE_UPLOAD_FAIL);
		} finally {
			if (content != null) {
				content = null;
			}
			if (meta != null) {
				meta = null;
			}
			client.shutdown();
		}
		return ossDomaiUrl;
	}
	
	public String saveImage(String folder, InputStream content)
			throws BusinessException {
		String ossDomaiUrl = null;
		ObjectMetadata meta = null;
		OSSClient client = new OSSClient(ossImageDomai,accessKeyId,accessKeySecret);
		try {
			logger.info("BucketName:" + ossAccessBucketName.trim());
			// 创建上传Object的Metadata
			meta = new ObjectMetadata();
			// 上传文件.
			PutObjectResult result = client.putObject(ossAccessBucketName, folder, content, meta);
			ossDomaiUrl = getOssUrl(ossImgUrl, folder);
		} catch (Exception e) {
			logger.error("ossUrl:", e);
			e.getStackTrace();
			throw new BusinessException(EnumResult.FILE_UPLOAD_FAIL);
		} finally {
			if (content != null) {
				content = null;
			}
			if (meta != null) {
				meta = null;
			}
			client.shutdown();
		}
		return ossDomaiUrl;
	}

	public String newDateTimeString() {
		try {
			// 如果同一个form保存多个截图,那会有并发生成图片文件名问题是相同的.
			Thread.sleep(1);
		} catch (InterruptedException e) {
			Thread.interrupted();
		}
		Date date = new Date();
		return new java.text.SimpleDateFormat(dateTimeFormatter).format(date);
	}
	
	
	/**
	 * 判断文件
	 * 
	 * @param file
	 * @return String
	 */
	public String imgType(MultipartFile file) {
		String contentType = file.getContentType();
		if (!contentType.contains("jpeg") && !contentType.contains("jpg") && !contentType.contains("png")) {
			String filename = file.getOriginalFilename().trim();
			if (Validator.isNotNullOrEmpty(filename) && filename.length() > 5) {
				contentType = filename.substring(filename.length() - 4, filename.length()).toLowerCase();
			} else {
				return "png";
			}
		}
		if (contentType == null) {
			return "";
		}
		if (contentType.contains("png")) {
			return "png";
		} else if (contentType.contains("gif")) {
			return "gif";
		} else if (contentType.contains("jpeg") || contentType.contains("jpg")) {
			return "jpg";
		} else {
			return "";
		}
	}
	
	public String getOssUrl(String ossPathUrl, String fileName) {
		return new StringBuffer().append(ossPathUrl).append("/").append(fileName).toString();
	}
	
	public String getOssAccessBucketName() {
		return ossAccessBucketName;
	}

	public String getOssImageDomai() {
		return ossImageDomai;
	}

	public String getAccessKeyId() {
		return accessKeyId;
	}

	public String getAccessKeySecret() {
		return accessKeySecret;
	}

	public String getOssImgUrl() {
		return ossImgUrl;
	}
	
}
